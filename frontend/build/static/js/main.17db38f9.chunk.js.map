{"version":3,"sources":["logo.svg","session.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","setSession","token","expiry","localStorage","setItem","clearSession","removeItem","isSessionValid","getItem","Date","getAuthHeaders","Authorization","concat","App","state","email","password","isRequesting","isLoggedIn","data","error","handleLogin","_callee","_this$state","response","_response$data","regenerator_default","a","wrap","_context","prev","next","_this","setState","axios","post","sent","t0","finish","stop","logout","getTestData","_callee2","_context2","get","headers","this","_this2","react_default","createElement","className","src","logo","alt","map","item","index","key","name","value","disabled","onClick","placeholder","type","onChange","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17db38f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Set the session in the local storage\nexport const setSession = (token: string, expiry: string): void => {\n  localStorage.setItem(\"token\", token);\n  localStorage.setItem(\"expiry\", expiry);\n};\n\n// Clear the session from the local storage\nexport const clearSession = (): void => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expiry\");\n};\n\n// Checks if the session is valid (locally) according to the expiration time\nexport const isSessionValid = (): boolean => {\n  const expiry = localStorage.getItem(\"expiry\");\n  if (expiry) {\n    return +new Date(expiry) > +new Date();\n  }\n  return false;\n};\n\n// Creates the authorization header using the bearer token\nexport const getAuthHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n});\n","import axios from \"axios\";\nimport React from \"react\";\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\nimport { isSessionValid, setSession, clearSession, getAuthHeaders } from \"./session\";\n\nexport interface AppState {\n  email: string;\n  password: string;\n  isRequesting: boolean;\n  isLoggedIn: boolean;\n  data: App.Item[];\n  error: string;\n}\n\nclass App extends React.Component<{}, AppState> {\n  public state = {\n    email: \"\",\n    password: \"\",\n    isRequesting: false,\n    isLoggedIn: false,\n    data: [],\n    error: \"\",\n  };\n\n  public componentDidMount() {\n    this.setState({ isLoggedIn: isSessionValid() });\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <div className=\"App-error\">{this.state.error}</div>\n        {this.state.isLoggedIn ? (\n          <div className=\"App-private\">\n            <div>\n              Server test data:\n              <ul>\n                {this.state.data.map((item: App.Item, index) => (\n                  <li key={index}>\n                    name: {item.name} / value: {item.value}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <button disabled={this.state.isRequesting} onClick={this.getTestData}>\n              Get test data\n            </button>\n            <button disabled={this.state.isRequesting} onClick={this.logout}>\n              Log out\n            </button>\n          </div>\n        ) : (\n          <div className=\"App-login\">\n            (try the credentials: testuser@email.com / my-password)\n            <input\n              disabled={this.state.isRequesting}\n              placeholder=\"email\"\n              type=\"text\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ email: e.target.value })}\n            />\n            <input\n              disabled={this.state.isRequesting}\n              placeholder=\"password\"\n              type=\"password\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ password: e.target.value })}\n            />\n            <button disabled={this.state.isRequesting} onClick={this.handleLogin}>\n              Log in\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private handleLogin = async (): Promise<void> => {\n    const { email, password } = this.state;\n    try {\n      this.setState({ error: \"\" });\n      this.setState({ isRequesting: true });\n      const response = await axios.post<{ token: string; expiry: string }>(\"/api/users/login\", { email, password });\n      const { token, expiry } = response.data;\n      setSession(token, expiry);\n      this.setState({ isLoggedIn: true });\n    } catch (error) {\n      this.setState({ error: \"Something went wrong\" });\n    } finally {\n      this.setState({ isRequesting: false });\n    }\n  };\n\n  private logout = (): void => {\n    clearSession();\n    this.setState({ isLoggedIn: false });\n  };\n\n  private getTestData = async (): Promise<void> => {\n    try {\n      this.setState({ error: \"\" });\n      const response = await axios.get<App.Item[]>(\"/api/items\", { headers: getAuthHeaders() });\n      this.setState({ data: response.data });\n    } catch (error) {\n      this.setState({ error: \"Something went wrong\" });\n    } finally {\n      this.setState({ isRequesting: false });\n    }\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\"New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.\");\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}